#!/bin/sh

# Alias para herramientas comunes
alias wget='wget --hsts-file="$XDG_CONFIG_HOME"/wget-hsts'
alias gpg2='gpg2 --homedir "$XDG_DATA_HOME"/gnupg'
# Alias de comandos básicos
alias cp='cp -iv'
alias cat='bat -p --tabs 8'
alias ls='eza -lagX --time-style iso --group-directories-first --smart-group'
alias grep='grep --color=auto'
# Alias para moverse rápidamente entre directorios
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
# Actualizar el sistema
alias update='yay -Syuu --answerclean --answerdiff --removemake --ignore ttf-google-fonts-git --ignore joycond-git --ignore joycond-cemuhook-git'
# Herramientas
alias xdotool_table='xmodmap -pk'
alias du='BLOCKSIZE=1073741824 du -s * | sort -rnk 1'
alias grub-update='sudo grub-mkconfig -o /boot/grub/grub.cfg'
# Alias para encontrar enlaces simbólicos rotos y archivos no reclamados
alias brokenlink='find / -xtype l -print 2>/dev/null'
alias lostfiles='
	sudo lostfiles |
		grep -iv "Theme\|opt\|Font" |
		grep -v "/usr/lib/modules/" |
		grep -v inputremapper
'
# Detectar que paquetes del AUR necesitan recompilarse
alias rebuild-detector="checkrebuild -v"
# Para pasar el output de un comando al portapeles con: comando | clipboard
alias clipboard="wl-copy"

alias webcam="ffplay /dev/video0"

# Para obtener el mimetype del archivo
filetype() {
	printf "xdg-mime: %s\n" "$(xdg-mime query filetype "$1")"
	printf "file:     %s" "$(file --dereference --brief --mime-type "$1")"
}

# Para reinciar pipewire
pw_restart() {
	systemctl --user stop wireplumber
	systemctl --user stop pipewire-pulse
	systemctl --user stop pipewire
	systemctl --user start pipewire
	systemctl --user start pipewire-pulse
	systemctl --user start wireplumber
}

# Limpiar dependencias innecesarias
cleanup() {
	PACKAGES=$(yay -Qdtq)
	if [ -n "$PACKAGES" ]; then
		# shellcheck disable=SC2086
		yay -Rcns $PACKAGES
	fi
}

deepcleanup() {
	pacman -Qqd 2>/dev/null |
		pacman -Rsu --print - 2>/dev/null |
		grep - | sed 's/-[0-9].*//g' >/tmp/pacman_unneeded
	if grep -qv ca-certificates /tmp/pacman_unneeded; then
		grep -v ca-certificates /tmp/pacman_unneeded | xargs yay --noconfirm -Rcns
	fi
}

# Función para reinstalar todos los paquetes
reinstall() {
	# shellcheck disable=SC2046
	yay -S $(pacman -Qq | grep -v "$(pacman -Qqm)")
}

# Función para restaurar los paquetes
# instalados explícitamente como tales
reexplicit() {
	for PACKAGE in $(yay -Qq); do
		if grep -E "\[ALPM\] installed" /var/log/pacman.log |
			grep "$PACKAGE" >/dev/null 2>&1; then
			sudo pacman -D --asexplicit "$PACKAGE"
		fi
	done
}

# Borrar entornos de un código laTeX
desencapsular() {
	TAG="$1"
	shift
	perl -pe "s/\\\\$TAG\\{([^{}]*(?:\\{$TAG\\}[^{}]*)*)\\}/\$1/g" "$@"
}

# Grabar la pantalla
screenrecord() {
	# Verificar si se proporcionó un archivo de salida
	if [ -z "$1" ]; then
		echo "Se debe dar como argumento el archivo de salida" >&2
		return 1
	fi
	# Detectar resolución de pantalla
	RESOLUTION=$(hyprctl monitors | grep -v "availableModes" | grep -oP "\d+x\d+(?=@)" | head -n1)
	wf-recorder -g "$RESOLUTION" -a -f "$1"
}

yabridgectl_dirs() {
	[ -d "$WINEPREFIX/drive_c/Program Files/Common Files" ] &&
		yabridgectl add "$WINEPREFIX/drive_c/Program Files/Common Files"
	[ -d "$WINEPREFIX/drive_c/Program Files/Steinberg" ] &&
		yabridgectl add "$WINEPREFIX/drive_c/Program Files/Steinberg"
}

push() {
	if git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
		git add .
		git commit
		git push
	else
		echo "No estás dentro de ningún repositorio" >&2
	fi
}

# Alias para encontrar archivos pac de pacman
pac() {
	# Buscar archivos .pacnew y .pacsave
	sudo find /etc \( -name "*.pacnew" -o -name "*.pacsave" \) 2>/dev/null | while read -r FILE; do
		# Obtener el nombre del archivo original
		ORIGINAL_FILE="${FILE%.pacnew}"
		ORIGINAL_FILE="${ORIGINAL_FILE%.pacsave}"

		# Mostrar encabezado
		echo "##$(printf '#%.0s' $(seq 1 ${#ORIGINAL_FILE}))##"
		echo "# $ORIGINAL_FILE #"
		echo "##$(printf '#%.0s' $(seq 1 ${#ORIGINAL_FILE}))##"

		# Mostrar diferencias y limitar la salida
		diff -d "$FILE" "$ORIGINAL_FILE" | head -n 20
	done
}

# Función para validar la indentación de un archivo
indent_check() {
	# Validar que el número de espacios es un entero
	if ! print -r -- "$1" | grep -qE '^[0-9]+$' || [ ! -f "$2" ]; then
		echo "Uso: indent_check <nº espacios> <archivo>"
		return 1
	fi
	awk -v n="$1" '
	{
		match($0, /^[ ]+/)
		if (RSTART == 1) {
			spaces = RLENGTH
			if (spaces % n != 0) print NR, "Indentación incorrecta:", spaces, "espacios ->", $0
		}
	}' "$2"
}

code_format() {
	# Directorio donde se encuentran los scripts
	DIRECTORIO=$1
	# Si no se pasó un directorio, usamos el directorio actual
	if [ -z "$DIRECTORIO" ]; then
		DIRECTORIO="."
	fi
	# Buscar todos los archivos en el directorio
	find "$DIRECTORIO" -wholename "$DIRECTORIO/.git*" -prune -o \
		-type f -print | grep -vE '/test/java/' |
		while read -r ARCHIVO; do
			# Obtener el tipo MIME del archivo
			MIME_TYPE=$(xdg-mime query filetype "$ARCHIVO")
			# Obtener el hash del archivo original
			OG_HASH=$(sha256sum "$ARCHIVO" | awk '{print $1}')
			# Si el tipo MIME es 'application/x-shellscript', formatear el archivo
			case "$MIME_TYPE" in
			application/x-shellscript) shfmt -w "$ARCHIVO" >/dev/null 2>&1 ;;
			text/x-java) astyle --style=java --indent=tab=8 --add-braces --squeeze-lines=1 -n "$ARCHIVO" >/dev/null 2>&1 ;;
			text/x-tex) latexindent --cruft=/tmp -w "$ARCHIVO" >/dev/null 2>&1 ;;
			esac
			# Obtener el hash del archivo actualizado, para ver si se cambió algo
			NEW_HASH=$(sha256sum "$ARCHIVO" | awk '{print $1}')
			if [ "$OG_HASH" != "$NEW_HASH" ]; then
				echo "Formateado: $ARCHIVO"
			fi
		done
}
